## The goal is to calculate the inverse of a matrix, then store it in the memory.
## Then each time we want to calculate again the same inverse of this matrix,
## the value of the inverse will not be calculated but rather taken from the memory


## constructs a list of functions within a specific environment 
## it will allow us to store the value of the inverse and access to it later on
## every matrix has to go "through" this function before calculation the inverse

makeCacheMatrix <- function(x = matrix()) {
	m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setsolve <- function(solve) m <<- solve
        getsolve <- function() m
        list(set = set, get = get,
             setsolve = setsolve,
             getsolve = getsolve)
}


## check if the inverse has already been calculated, if so it give the result from the memory
## if not it calculate the inverse and store it into the memory in order to avoid having to
## recalculate it

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
	        m <- x$getsolve()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- solve(data, ...)
        x$setsolve(m)
        m

}
